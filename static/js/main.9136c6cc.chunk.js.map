{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["CREATE_USER","gql","App","useMutation","createUser","data","useEffect","variables","createUserInput","firstName","lastName","email","password","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"gPAAe,I,6BCYTA,GANYC,YAAH,mEAMKA,YAAH,+MAUAA,YAAH,gIAmCCC,MA1Bf,WAGE,MAA+BC,YAAYH,GAA3C,mBAAOI,EAAP,KAoBA,OApBA,KAAqBC,KAOrBC,qBAAU,WACRF,EAAW,CACTG,UAAW,CACTC,gBAAiB,CACfC,UAAW,UACXC,SAAU,UACVC,MAAO,mBACPC,SAAU,mBAIf,IAEI,qBAAKC,UAAU,SC1CTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wCCQRQ,EAAWC,YAAe,CAC9BC,IAAK,oDAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAE1BC,EACJ,+MAEF,MAAO,CACLD,QAAQ,2BACHA,GADE,IAELE,cAAoB,iBAAaD,SAIjCE,EAAS,IAAIC,IAAa,CAE9BC,KAAMR,EAASS,OAAOZ,GACtBa,MAAO,IAAIC,MAGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAgBT,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,SAM1B7B,M","file":"static/js/main.9136c6cc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n// import gql from 'graphql-tag';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport { useEffect } from 'react';\n\nconst GET_HELLO = gql`\n  query GetHello {\n    getHello\n  }\n`;\n\nconst CREATE_USER = gql`\n  mutation CreateUserMutation($createUserInput: CreateUserInput!) {\n    createUser(createUserInput: $createUserInput) {\n      _id\n      firstName\n      lastName\n    }\n  }\n`;\n\nconst ADD_TODO = gql`\n  mutation AddTodo($type: String!) {\n    addTodo(type: $type) {\n      id\n      type\n    }\n  }\n`;\n\nfunction App() {\n  // const { data } = useQuery(GET_HELLO);\n\n  const [createUser, { data }] = useMutation(CREATE_USER);\n  // const [addTodo, { data }] = useMutation(ADD_TODO);\n\n  // useEffect(() => {\n  //   addTodo({ variables: { type: 'input.value' } });\n  // }, []);\n\n  useEffect(() => {\n    createUser({\n      variables: {\n        createUserInput: {\n          firstName: 'Testaaa',\n          lastName: 'Testaaa',\n          email: 'test@testweq.com',\n          password: 'test123456',\n        },\n      },\n    });\n  }, []);\n\n  return <div className=\"App\"></div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\n\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: 'https://interview-api-app.herokuapp.com/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token =\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RAdGVzdC5jb20iLCJfaWQiOiI2MGU0MmQyMzQ2MTI2NjFhYzNkYmZmYWYiLCJpYXQiOjE2MjU1NzY0MDYsImV4cCI6MTYyNTY2MjgwNn0.Zoom5TecxNHE1bbYcT6GtCEpP81ThU9SxMUcyGKibmg';\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\nconst client = new ApolloClient({\n  //   uri: 'https://interview-api-app.herokuapp.com/graphql',\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}